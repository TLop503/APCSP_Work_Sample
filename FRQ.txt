1: Describe the overall purpose of the program
    This program is designed to calculate paces for various 
    track races based on the user's 400m time.

2: Describes what functionality of the program is demonstrated in the video

3: Describes the input and output of the program demonstrated in the video
    The user inputs an integer representing their 400m time, and the program
    outputs a list of suggested paces for various races

4: Code segment showing how data is stored in the list:
    //Stores what the user time gets multiplied by
    public static final double[] kFactors = {0.5, 2, 3.75, 4, 4, 7.5, 12.5};

5: Code segment showing how data in the list is being used:
    for (int i = 0; i < 7; i++) { //iterates through lists of data
        //times are calculated by multiplying them by a constant and then adding a few secconds to account for slower speeds
        calculatedTimes[i] = ((time * kFactors[i]) + kAddon[i]);
    }

6: Name of list
    kFactors

7: What the data in the list represents:
    This list stores the factors the user time will be multiplied by

8: How the list manages complexity:
    By storing each unique factor in a list, they can be called and used in a for-loop
    instead of having to multiply each factor by the input in a seperate line.

9: The first program code segment must be a student-developed 
   procedure that:
   □ Defines the procedure’s name and return type (if necessary)
   □ Contains and uses one or more parameters that have an effect
   on the functionality of the procedure
   □ Implements an algorithm that includes sequencing, selection,
   and iteration

   paste doMath()

10: Where the procedure is being called:
    line 45

11: What the procedure does and how it works with the program
    The procedure takes user inputed time, and extrapolates it into a list of
    reccomended paces for longer-distance races. The data is stored in a public 
    list so it can be accessed later by a different function.

12: How the procedure works
    First, the procedure takes a double "time" as a paramater. Next, time is
    checked in an if statement - if time is larger than 40, the program continues
    and if it isn't it stops and asks for a realistic time. If time is
    greater than 40, the program starts a for-loop, iterateing through 3
    lists. Time is multiplied by the contents of the first list, 
    adds a constant from the second list, and the result is 
    is stored in the third list. The for loop ensures each list is being acessed
    at the same index at the same time. Once this loop is done, the 
    procedure ends and the program continues. This is a void function, so there
    is no return value. Instead, the function stores the data it manipulates 
    in a variable that can be called later.

13: First call to procedure
    doMath(20)

14: Second call
    doMath(60)

15: Conditions tested by first call:
    20 is less than 40 so the else statement runs

16: Conditions tested by seccond call:
    60 is greater than 40 so the if statement's contents runs

17: Results of first call:
    The code prints a message telling the user to input a realistic number
    (the world's fastest 400m time is 45 secconds, and inputing small times
    can yeild flawed results since the math is only accurate for average times,
    and not extreme edge cases.)

18: Results of seccond call:
    The main purpose of the function runs, manipulating the arrays to calculated
    each time
